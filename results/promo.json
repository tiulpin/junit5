{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant semicolon",
  "tags": [
    "kotlin"
  ],
  "severity": "High",
  "comment": "Redundant semicolon",
  "detailsInfo": "Reports redundant semicolons (`;`) that can be safely removed.\n\n\nKotlin does not require a semicolon at the end of each statement or expression.\nA quick-fix is suggested to remove redundant semicolons.\n\n**Example:**\n\n\n      val myMap = mapOf(\"one\" to 1, \"two\" to 2);\n      myMap.forEach { (key, value) ->  print(\"$key -> $value\")};\n\nAfter the quick-fix is applied:\n\n\n      val myMap = mapOf(\"one\" to 1, \"two\" to 2)\n      myMap.forEach { (key, value) ->  print(\"$key -> $value\")}\n\nThere are two cases though where a semicolon is required:\n\n1. Several statements placed on a single line need to be separated with semicolons:\n\n\n         map.forEach { val (key, value) = it; println(\"$key -> $value\") }\n\n2. `enum` classes that also declare properties or functions, require a semicolon after the list of enum constants:\n\n\n         enum class Mode {\n             SILENT, VERBOSE;\n\n             fun isSilent(): Boolean = this == SILENT\n         }\n               \n",
  "sources": [
    {
      "type": "file",
      "path": "junit-vintage-engine/junit-vintage-engine.gradle.kts",
      "language": "kotlin",
      "line": 1,
      "offset": 44,
      "length": 1,
      "code": {
        "startLine": 1,
        "length": 1,
        "offset": 44,
        "surroundingCode": "import aQute.bnd.gradle.BundleTaskConvention;\n\nplugins {\n\t`java-library-conventions`\n\t`junit4-compatibility`"
      }
    }
  ],
  "attributes": {
    "module": "junit5.junit-vintage-engine",
    "inspectionName": "RedundantSemicolon"
  },
  "hash": "3309131812609009199"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of <code>System.out</code> should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "method",
      "path": "junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java",
      "language": "JAVA",
      "line": 37,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 35,
        "length": 10,
        "offset": 69,
        "surroundingCode": "\n\tpublic static void main(String... args) {\n\t\tint exitCode = execute(System.out, System.err, args).getExitCode();\n\t\tSystem.exit(exitCode);\n\t}"
      }
    }
  ],
  "attributes": {
    "module": "junit5.junit-platform-console.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "-2483864343711134851"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of <code>System.err</code> should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "method",
      "path": "junit-platform-console/src/main/java/org/junit/platform/console/ConsoleLauncher.java",
      "language": "JAVA",
      "line": 37,
      "offset": 37,
      "length": 10,
      "code": {
        "startLine": 35,
        "length": 10,
        "offset": 81,
        "surroundingCode": "\n\tpublic static void main(String... args) {\n\t\tint exitCode = execute(System.out, System.err, args).getExitCode();\n\t\tSystem.exit(exitCode);\n\t}"
      }
    }
  ],
  "attributes": {
    "module": "junit5.junit-platform-console.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "7151884570049400962"
}]}