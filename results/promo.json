{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of <code>System.out</code> should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "method",
      "path": "platform-tooling-support-tests/src/main/java/platform/tooling/support/Request.java",
      "language": "JAVA",
      "line": 114,
      "offset": 3,
      "length": 10,
      "code": {
        "startLine": 112,
        "length": 10,
        "offset": 53,
        "surroundingCode": "\n\t\t\tvar result = tool.run(configuration.build());\n\t\t\tSystem.out.println(result.getOutput(\"out\"));\n\t\t\tSystem.err.println(result.getOutput(\"err\"));\n\t\t\treturn result;"
      }
    }
  ],
  "attributes": {
    "module": "junit5.platform-tooling-support-tests.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "-6657401223152315743"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of 'System.out' or 'System.err'",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Uses of <code>System.err</code> should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "method",
      "path": "platform-tooling-support-tests/src/main/java/platform/tooling/support/Request.java",
      "language": "JAVA",
      "line": 115,
      "offset": 3,
      "length": 10,
      "code": {
        "startLine": 113,
        "length": 10,
        "offset": 100,
        "surroundingCode": "\t\t\tvar result = tool.run(configuration.build());\n\t\t\tSystem.out.println(result.getOutput(\"out\"));\n\t\t\tSystem.err.println(result.getOutput(\"err\"));\n\t\t\treturn result;\n\t\t}"
      }
    }
  ],
  "attributes": {
    "module": "junit5.platform-tooling-support-tests.main",
    "inspectionName": "SystemOutErr"
  },
  "hash": "2994699096558401070"
},{
  "tool": "Code Inspection",
  "category": "JUnit",
  "type": "Test class with no tests",
  "tags": [
    "JAVA"
  ],
  "severity": "High",
  "comment": "Test class <code>JUnit4SuiteWithExceptionThrowingRunner</code> has no tests",
  "detailsInfo": "Reports non-`abstract` test cases without any test methods.\n\nSuch test cases usually indicate unfinished code\nor could be a refactoring leftover that should be removed.\n\nExample:\n\n\n      public class CrucialTest {\n        @Before\n        public void setUp() {\n          System.out.println(\"setting up\");\n        }\n      }\n\nUse the **Ignore test cases which have superclasses with test methods** option to ignore test cases which have super classes\nwith test methods.",
  "sources": [
    {
      "type": "class",
      "path": "junit-vintage-engine/src/testFixtures/java/org/junit/vintage/engine/samples/junit4/JUnit4SuiteWithExceptionThrowingRunner.java",
      "language": "JAVA",
      "line": 21,
      "offset": 13,
      "length": 38,
      "code": {
        "startLine": 19,
        "length": 38,
        "offset": 68,
        "surroundingCode": "@RunWith(ExceptionThrowingRunner.class)\n@ChildCount(1)\npublic class JUnit4SuiteWithExceptionThrowingRunner {\n}"
      }
    }
  ],
  "attributes": {
    "module": "junit5.junit-vintage-engine.testFixtures",
    "inspectionName": "TestCaseWithNoTestMethods"
  },
  "hash": "5936377284167602669"
}]}